package arjun.wordladdersolver;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Arjun
 */
public class WordLadderSolverUI extends javax.swing.JFrame {

    private String m_sDictionaryName = null;
    private String m_CurrentDirectory = null;
    private String m_BeginWord = "";
    private String m_EndWord = "";
    private ArrayList<LadWord> m_LadWordVector = new ArrayList<>();
    private int m_nLettersInAWord = 0;
    private boolean m_bAtLeastOneChange = false;
    private ArrayList<Integer> m_CheckedBoxVector = new ArrayList<>();
    private ArrayList<Integer> m_WordIndexList = new ArrayList<>();
    private Puzzle m_Puzzle = new Puzzle();

    /**
     * Creates new form WordLadderSolverUI
     */
    public WordLadderSolverUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DictionaryChooser = new javax.swing.JFileChooser();
        BeginWordTextBox = new javax.swing.JTextField();
        BeginWordLabel = new javax.swing.JLabel();
        EndWordLabel = new javax.swing.JLabel();
        EndWordTextBox = new javax.swing.JTextField();
        OpenDictionaryButton = new javax.swing.JButton();
        RunSolverButton = new javax.swing.JButton();
        SaveSolutionButton = new javax.swing.JButton();
        TableScrollPane = new javax.swing.JScrollPane();
        OutputTable = new javax.swing.JTable();
        SaveLearningButton = new javax.swing.JButton();
        RerunLabel1 = new javax.swing.JLabel();
        RerunLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("WORD LADDER SOLVER");

        BeginWordTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BeginWordTextBoxActionPerformed(evt);
            }
        });

        BeginWordLabel.setText("BEGIN WORD");

        EndWordLabel.setText("END WORD");

        EndWordTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EndWordTextBoxActionPerformed(evt);
            }
        });

        OpenDictionaryButton.setText("OPEN DICTIONARY");
        OpenDictionaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenDictionaryButtonActionPerformed(evt);
            }
        });

        RunSolverButton.setText("RUN SOLVER");
        RunSolverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunSolverButtonActionPerformed(evt);
            }
        });

        SaveSolutionButton.setText("SAVE SOLUTION");
        SaveSolutionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveSolutionButtonActionPerformed(evt);
            }
        });

        OutputTable.setColumnSelectionAllowed(true);
        TableScrollPane.setViewportView(OutputTable);
        OutputTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        SaveLearningButton.setText("SAVE LEARNING");
        SaveLearningButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveLearningButtonActionPerformed(evt);
            }
        });

        RerunLabel1.setText("SELECT UNKNOWN / UNPOPULAR WORDS");

        RerunLabel2.setText("TO AVOID & THEREAFTER RE-RUN SOLVER");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EndWordLabel)
                            .addComponent(BeginWordLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(SaveSolutionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(EndWordTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BeginWordTextBox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OpenDictionaryButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(SaveLearningButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RerunLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(RerunLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RunSolverButton, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                        .addComponent(TableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OpenDictionaryButton)
                    .addComponent(RunSolverButton))
                .addGap(29, 29, 29)
                .addComponent(BeginWordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BeginWordTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(EndWordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EndWordTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(SaveSolutionButton)
                        .addGap(53, 53, 53)
                        .addComponent(SaveLearningButton))
                    .addComponent(TableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RerunLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RerunLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is generated by the Form Editor.
     *
     * @param evt
     */
    private void BeginWordTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BeginWordTextBoxActionPerformed
    }//GEN-LAST:event_BeginWordTextBoxActionPerformed

    /**
     * This method is generated by the Form Editor.
     *
     * @param evt
     */
    private void EndWordTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EndWordTextBoxActionPerformed
    }//GEN-LAST:event_EndWordTextBoxActionPerformed

    /**
     * This method saves back the dictionary file into filename
     * m_sDictionaryName
     */
    private void SaveDictionaryFile() {
        try (BufferedWriter streamWriter = new BufferedWriter(new FileWriter(m_sDictionaryName))) {
            for (int i = 0; i < m_LadWordVector.size(); i++) {
                streamWriter.write(String.format("%1$s,%2$s", m_LadWordVector.get(i).m_sData, (new Integer(m_LadWordVector.get(i).m_iUnPopRating)).toString()));
                streamWriter.newLine();
            }
            streamWriter.close();
        } catch (Exception e) {
        }
    }

    /**
     * This method opens and reads the dictionary file with filename
     * m_sDictionaryName.
     *
     * This dictionary is alphabetically sorted, comma delimited, with the
     * second token being the unpopularity rating of the word.
     *
     * @return any errors from ErrorCodes in opening or reading the file. This
     * is parsed in the calling method.
     */
    private int ReadDictionaryFile() {
        /**
         * Read the file, line by line
         */
        int iStatus = ErrorCodes.OK;
        try (BufferedReader streamReader = new BufferedReader(new FileReader(m_sDictionaryName))) {
            boolean bFirstLine = true;
            String line;
            // Read in a line
            while ((line = streamReader.readLine()) != null) {
                // Split line with delimiter comma into tokens
                String[] tokens = line.split("[,]", -1);
                // Process each token
                if (tokens.length == 0) {
                    continue;
                } else if (tokens.length != 2) {
                    iStatus = ErrorCodes.BAD_DELIMITING_IN_DICTIONARY;
                    break;
                } else {
                    LadWord ladWord = new LadWord();
                    ladWord.m_sData = tokens[0].toLowerCase().trim();
                    if (ladWord.m_sData.length() == 0) {
                        iStatus = ErrorCodes.EMPTY_WORD_IN_DICTIONARY;
                        break;
                    }
                    // Update m_nLettersInAWord if bFirstLine;
                    // Else check for word length consistencies.
                    if (bFirstLine) {
                        m_nLettersInAWord = ladWord.m_sData.length();
                        bFirstLine = false;
                    } else if (m_nLettersInAWord != ladWord.m_sData.length()) {
                        iStatus = ErrorCodes.INCONSISTENT_WORD_LENGTH_IN_DICTIONARY;
                        break;
                    }
                    // Parse the unpopularity rating;
                    // This should be an integer >= 1.
                    try {
                        int iUnPopRating = Integer.valueOf(tokens[1].trim()).intValue();
                        if (iUnPopRating <= 1) {
                            iUnPopRating = 1;
                        }
                        ladWord.m_iUnPopRating = iUnPopRating;
                    } catch (NumberFormatException e) {
                        iStatus = ErrorCodes.INTEGER_FORMAT_ERROR_IN_DICTIONARY;
                        break;
                    }
                    // Everything has gone well
                    // Add ladword to m_LadWordVector provided
                    // Check for alphabetic sortedness of the file
                    int iLadWordVectorSize = m_LadWordVector.size();
                    if ((iLadWordVectorSize == 0) || (ladWord.m_sData.compareTo(m_LadWordVector.get(iLadWordVectorSize - 1).m_sData) > 0)) {
                        m_LadWordVector.add(ladWord);
                    } else {
                        iStatus = ErrorCodes.DICTIONARY_IS_NOT_SORTED_ALPHABETICALLY;
                        break;
                    }
                }
            }
            streamReader.close();
        } catch (Exception e) {
            // File open error
            iStatus = ErrorCodes.DICTIONARY_FILE_OPEN_ERROR;
        }
        return iStatus;
    }

    /**
     * This method is generated by the Form Editor. It is used to open the
     * appropriate dictionary.
     *
     * @param evt
     */
    private void OpenDictionaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenDictionaryButtonActionPerformed
        /**
         * Before opening a new dictionary, check if current dictionary requires
         * to be saved. If so, ask user permission before saving it.
         */
        if (m_bAtLeastOneChange) {
            int result = JOptionPane.showConfirmDialog(null, "Do you want to save the learning in the dictionary?", "Save Learning Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            // If the yes button was pressed ... 
            if (result == JOptionPane.YES_OPTION) {
                SaveDictionaryFile();
                m_bAtLeastOneChange = false;
            }
        }

        /**
         * Open the File Dialog. Choose the dictionary and read it in.
         */
        int returnVal = DictionaryChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            m_sDictionaryName = DictionaryChooser.getSelectedFile().getAbsolutePath();
            m_CurrentDirectory = DictionaryChooser.getCurrentDirectory().getAbsolutePath();
            m_LadWordVector.clear();
            m_nLettersInAWord = 0;
            m_bAtLeastOneChange = false;
            /**
             * Read in the dictionary
             */
            int ReadStatus = ReadDictionaryFile();
            /**
             * Process the return for any error conditions
             */
            if (ReadStatus != ErrorCodes.OK) {
                ErrorCodes.ProcessReturnValue(ReadStatus);
                return;
            }
        } else { // Keep the old dictionary if any
            return;
        }

        /**
         * Confirm the dictionary word length with the user.
         */
        JOptionPane.showConfirmDialog(null, "Read a " + m_nLettersInAWord + "-letter word dictionary.", "Open Dictionary Information", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);

        /**
         * If the unpopularity rating of some of the words in the dictionary are
         * set to non default values, this is a good time to ask the user
         * whether he/she wants to reset these values to their defaults.
         */
        for (int i = 0; i < m_LadWordVector.size(); i++) {
            if (m_LadWordVector.get(i).m_iUnPopRating > 1) {
                int result = JOptionPane.showConfirmDialog(null, "Do you want to reset the learning in the dictionary?", "Reset Learning Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                // If the yes button was pressed ... 
                if (result == JOptionPane.YES_OPTION) {
                    for (int j = i; j < m_LadWordVector.size(); j++) {
                        m_LadWordVector.get(j).m_iUnPopRating = 1;
                    }
                    m_bAtLeastOneChange = true;
                }
                // And...
                break;
            }
        }

        /**
         * Set up the m_Puzzle for performing shortest paths.
         */
        m_Puzzle.Setup(m_LadWordVector);

        /**
         * Reset all run member variables.
         */
        m_CheckedBoxVector.clear();
        m_WordIndexList.clear();
    }//GEN-LAST:event_OpenDictionaryButtonActionPerformed

    /**
     * This method is generated by the Form Editor. It is used to run the Word
     * Ladder Solver.
     *
     * @param evt
     */
    private void RunSolverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunSolverButtonActionPerformed
        /**
         * Check if dictionary is loaded
         */
        if (m_nLettersInAWord == 0) {
            JOptionPane.showConfirmDialog(null, "No Dictionary Loaded.", "Error Run Solver", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }

        /**
         * Read the begin and end words from the appropriate text boxes
         */
        String beginWord = BeginWordTextBox.getText().toLowerCase().trim();
        String endWord = EndWordTextBox.getText().toLowerCase().trim();

        /**
         * Processing the begin and end words
         */
        if ((!beginWord.equals(m_BeginWord)) || (!endWord.equals(m_EndWord))) {
            // These are a new pair of begin and end words
            m_CheckedBoxVector.clear();
            m_BeginWord = beginWord;
            m_EndWord = endWord;
        } else { // These are the old words and thus the m_CheckedBoxVector is now created
            // Create the m_CheckedBoxVector from OutputTable
            int[] selectedRows = OutputTable.getSelectedRows();
            if (selectedRows.length == 0) {
                return; // Nothing changed; don't need to re-run solver
            } else {
                for (int i = 0; i < selectedRows.length; i++) {
                    m_CheckedBoxVector.set(selectedRows[i], 1);
                }
            }
        }

        /**
         * m_CheckedBoxVector processing
         */
        if (m_CheckedBoxVector.isEmpty()) {
            if (m_BeginWord.length() != m_nLettersInAWord) {
                JOptionPane.showConfirmDialog(null, "Begin Word does not have " + (new Integer(m_nLettersInAWord)).toString() + " letters.", "Error Run Solver", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (m_EndWord.length() != m_nLettersInAWord) {
                JOptionPane.showConfirmDialog(null, "End Word does not have " + (new Integer(m_nLettersInAWord)).toString() + " letters.", "Error Run Solver", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                return;
            }
        } else {
            // Update unpopularity values of the checked words in m_CheckedBoxVector
            for (int i = 1; i < m_CheckedBoxVector.size() - 1; i++) {
                if (m_CheckedBoxVector.get(i) == 1) {
                    m_LadWordVector.get(m_WordIndexList.get(i)).m_iUnPopRating += m_nLettersInAWord;
                    m_bAtLeastOneChange = true; // Record that unpopularity values in dictionary may require updating
                }
            }
        }

        /**
         * Run the Word Ladder Solver
         */
        int[] RunStatus = {0};
        m_WordIndexList = m_Puzzle.Run(m_LadWordVector, m_BeginWord, m_EndWord, RunStatus);
        /**
         * Process the return for any error conditions
         */
        if (RunStatus[0] != ErrorCodes.OK) {
            ErrorCodes.ProcessReturnValue(RunStatus[0]);
            return;
        }

        /**
         * Update the OutputTable display
         */
        int NumberOfWords = m_WordIndexList.size();

        String header[] = new String[1];
        header[0] = "" + (new Integer(NumberOfWords)).toString() + " Words";

        Object data[][] = new Object[NumberOfWords][1];
        for (int i = 0; i < NumberOfWords; i++) {
            data[i][0] = m_LadWordVector.get(m_WordIndexList.get(i)).m_sData;
        }

        OutputTable = new javax.swing.JTable(data, header);
        TableScrollPane.setViewportView(OutputTable);

        /**
         * Initialize m_CheckedBoxVector, making it ready for a re-run
         */
        m_CheckedBoxVector.clear();
        for (int i = 0; i < m_WordIndexList.size(); i++) {
            m_CheckedBoxVector.add(0);
        }
    }//GEN-LAST:event_RunSolverButtonActionPerformed

    /**
     * This method is generated by the Form Editor. It is used to save a
     * particular solution of Word Ladder.
     *
     * @param evt
     */
    private void SaveSolutionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveSolutionButtonActionPerformed
        String sSaveFileName;
        /**
         * Create a filename from saving the solution based on the begin and end
         * words
         */
        if ((m_WordIndexList != null) && (m_WordIndexList.size() >= 2)) {
            int i = 0;
            sSaveFileName = m_LadWordVector.get(m_WordIndexList.get(i)).m_sData;
            sSaveFileName += "-";
            i = m_WordIndexList.size() - 1;
            sSaveFileName += m_LadWordVector.get(m_WordIndexList.get(i)).m_sData;
            sSaveFileName += ".txt";
        } else {
            return;
        }

        /**
         * Confirm filename and write it out to the same location as current
         * dictionary
         */
        JOptionPane.showConfirmDialog(null, "Solution being saved to file " + sSaveFileName, "Save Solution Information", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);

        String sFullPath = m_CurrentDirectory + "\\" + sSaveFileName;
        try (BufferedWriter streamWriter = new BufferedWriter(new FileWriter(sFullPath))) {
            for (int i = 0; i < m_WordIndexList.size(); i++) {
                streamWriter.write(String.format("%1$s", m_LadWordVector.get(m_WordIndexList.get(i)).m_sData));
                streamWriter.newLine();
            }
            streamWriter.close();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_SaveSolutionButtonActionPerformed

    /**
     * This method is generated by the Form Editor. It is used to re-save a
     * dictionary with updated unpopularity values of its words.
     *
     * @param evt
     */
    private void SaveLearningButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveLearningButtonActionPerformed
        /**
         * Check if current dictionary requires to be saved. If so, ask user
         * permission before saving it.
         */
        if (m_bAtLeastOneChange) {
            int result = JOptionPane.showConfirmDialog(null, "Do you want to save the learning in the dictionary?", "Save Learning Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            // If the yes button was pressed ... 
            if (result == JOptionPane.YES_OPTION) {
                SaveDictionaryFile();
                m_bAtLeastOneChange = false;
            }
        }
    }//GEN-LAST:event_SaveLearningButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void mainApp(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;




                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WordLadderSolverUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WordLadderSolverUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WordLadderSolverUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WordLadderSolverUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new WordLadderSolverUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BeginWordLabel;
    private javax.swing.JTextField BeginWordTextBox;
    private javax.swing.JFileChooser DictionaryChooser;
    private javax.swing.JLabel EndWordLabel;
    private javax.swing.JTextField EndWordTextBox;
    private javax.swing.JButton OpenDictionaryButton;
    private javax.swing.JTable OutputTable;
    private javax.swing.JLabel RerunLabel1;
    private javax.swing.JLabel RerunLabel2;
    private javax.swing.JButton RunSolverButton;
    private javax.swing.JButton SaveLearningButton;
    private javax.swing.JButton SaveSolutionButton;
    private javax.swing.JScrollPane TableScrollPane;
    // End of variables declaration//GEN-END:variables
}
